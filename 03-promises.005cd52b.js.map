{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEyBC,SAASC,cAAc,yBAAhD,MACMC,EAAOF,SAASC,cAAc,sBAC9BE,EAAQH,SAASC,cAAc,uBAC/BG,EAASJ,SAASC,cAAc,wBAItC,SAASI,EAAcC,EAAUC,GAa/B,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,C,SAAEH,EAAUQ,MAAAP,IAGpBG,EAAO,C,SAAEJ,EAAUQ,MAAAP,MAEpBA,MAdMP,SAASC,cAAc,SAoB/Bc,iBAAiB,SAASC,IAC7BA,EAAEC,iBACF,IAAIC,EAAaC,OAAOhB,EAAMiB,OAC1BC,EAAYF,OAAOjB,EAAKkB,OAG5B,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAOgB,MAAOE,IAChCjB,EAAc,EAAIiB,EAAGJ,EAAaI,EAAID,GACnCE,MAAK,EAACjB,SAAEA,EAAUQ,MAAAU,MACjBC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBrB,QAAiBkB,UAGzCI,OAAM,EAACtB,SAAEA,EAAUQ,MAAAe,MAClBJ,EAAA3B,GAAS4B,OAAOI,QACd,sBAAoBxB,QAAeuB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n           // Fulfill\n        resolve({ position, delay });\n      } else {\n         // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\nform.addEventListener('click', e => {\n  e.preventDefault();\n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n\n\n  for (let i = 0; i < amount.value; i++) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n\n\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","i","then","delay2","$parcel$interopDefault","Notify","success","catch","delay3","failure"],"version":3,"file":"03-promises.005cd52b.js.map"}